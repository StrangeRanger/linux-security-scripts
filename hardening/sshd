#!/bin/bash
#
# Hardens sshd by modifying the configurations of '/etc/ssh/sshd_config'.
#
# Note: This configures sshd_config to the recommendations of the security auditing tool
#       knonw as Lynis (https://github.com/CISOfy/lynis).
#
# Version: v1.1.2
# License: MIT License
#          Copyright (c) 2020-2023 Hunter T. (StrangeRanger)
#
########################################################################################
#### [ Variables ]


config_file_bak="/etc/ssh/sshd_config.bak"
config_file="/etc/ssh/sshd_config"
green="$(printf '\033[0;32m')"
cyan="$(printf '\033[0;36m')"
red="$(printf '\033[1;31m')"
nc="$(printf '\033[0m')"


#### End of [ Variables ]
########################################################################################
#### [ Functions ]


########
# Cleanly exit the script.
#
# Arguments:
#   $1 - required
#       Exit status code.
########
clean_up() {
    echo -e "\nExiting..."
    exit "$1"
}


#### End of [ Functions ]
########################################################################################
#### [ Prepping ]


## Check if the script was executed with root privilege.
if [[ $EUID != 0 ]]; then
    echo "${red}Please run this script as or with root privilege${nc}" >&2
    clean_up 1
fi

## Confirm that 'sshd_config' exists.
if [[ ! -f $config_file ]]; then
    echo "${red}'sshd_config' doesn't exist" >&2
    echo "${cyan}openssh-server may not be installed${nc}"
    clean_up 1
fi


#### End of [ Prepping ]
########################################################################################
#### [ Main ]


read -rp "We will now harden sshd. Press [Enter] to continue."

if [[ -f $config_file_bak ]]; then
    printf "A backup of 'sshd_config' already exists. "
    read -rp "Do you want to overwrite it? [y/N] " choice

    choice=$(echo "$choice" | tr '[:upper:]' '[:lower:]')
    case "$choice" in
        y|yes)
            echo "Overwriting backup of 'sshd_config'..."
            # shellcheck disable=SC2015
            rm $config_file_bak && cp $config_file $config_file_bak || {
                echo "${red}Failed to back up sshd_config" >&2
                echo "${cyan}Please create a backup of the original 'sshd_config'" \
                    "before continuing${nc}"
                clean_up 1
            }
            ;;
    esac
else
    echo "Backing up 'sshd_config'..."
    cp $config_file $config_file_bak || {
        echo "${red}Failed to back up sshd_config" >&2
        echo "${cyan}Please create a backup of the original 'sshd_config' before" \
            "continuing${nc}"
        clean_up 1
    }
fi

if grep -Eq '^LogLevel VERBOSE$' "$config_file"; then
    echo "LogLevel already set to 'VERBOSE'"
elif grep -Eq '^#?LogLevel(.*)?$' "$config_file"; then
    echo "Setting 'LogLevel VERBOSE'..."
    sed -Ei 's/^#?LogLevel(.*)?$/LogLevel VERBOSE/gm' "$config_file" \
        || echo "${red}Failed to set 'LogLevel VERBOSE'${nc}"
fi

if grep -Eq '^LoginGraceTime 30$' "$config_file"; then
    echo "LoginGraceTime already set to '30'"
elif grep -Eq '^#?LoginGraceTime(.*)?$' "$config_file"; then
    echo "Setting 'LoginGraceTime 30'..."
    sed -Ei 's/^#?LoginGraceTime(.*)?$/LoginGraceTime 30/gm' "$config_file" \
        || echo "${red}Failed to set 'LoginGraceTime 30'${nc}"
fi

if grep -Eq '^PermitRootLogin no$' "$config_file"; then
    echo "PermitRootLogin already set to 'no'"
elif grep -Eq '^#?PermitRootLogin(.*)?$' "$config_file"; then
    echo "Setting 'PermitRootLogin no'..."
    sed -Ei 's/^#?PermitRootLogin(.*)?$/PermitRootLogin no/gm' "$config_file" \
        || echo "${red}Failed to set 'PermitRootLogin no'${nc}"
fi

if grep -Eq '^MaxAuthTries 3$' "$config_file"; then
    echo "MaxAuthTries already set to '3'"
elif grep -Eq '^#?MaxAuthTries(.*)?$' "$config_file"; then
    echo "Setting 'MaxAuthTries 3'..."
    sed -Ei 's/^#?MaxAuthTries(.*)?$/MaxAuthTries 3/gm' "$config_file" \
        || echo "${red}Failed to set 'MaxAuthTries 3'${nc}"
fi

if grep -Eq '^MaxSessions 2$' "$config_file"; then
    echo "MaxSessions already set to '2'"
elif grep -Eq '^#?MaxSessions(.*)?$' "$config_file"; then
    echo "Setting 'MaxSessions 2'..."
    sed -Ei 's/^#?MaxSessions(.*)?$/MaxSessions 2/gm' "$config_file" \
        || echo "${red}Failed to set 'MaxSessions 2'${nc}"
fi

if grep -Eq '^PubkeyAuthentication yes$' "$config_file"; then
    echo "PubkeyAuthentication already set to 'yes'"
elif grep -Eq '^#?PubkeyAuthentication(.*)?$' "$config_file"; then
    echo "Setting 'PubkeyAuthentication yes'..."
    sed -Ei 's/^#?PubkeyAuthentication(.*)?$/PubkeyAuthentication yes/gm' "$config_file" \
        || echo "${red}Failed to set 'PubkeyAuthentication yes'${nc}"
fi

if grep -Eq '^PermitEmptyPasswords no$' "$config_file"; then
    echo "PermitEmptyPasswords already set to 'no'"
elif grep -Eq '^#?PermitEmptyPasswords(.*)?$' "$config_file"; then
    echo "Setting 'PermitEmptyPasswords no'..."
    sed -Ei 's/^#?PermitEmptyPasswords(.*)?$/PermitEmptyPasswords no/gm' "$config_file" \
        || echo "${red}Failed to set 'PermitEmptyPasswords no'${nc}"
fi

if grep -Eq '^ChallengeResponseAuthentication no$' "$config_file"; then
    echo "ChallengeResponseAuthentication already set to 'no'"
elif grep -Eq '^#?ChallengeResponseAuthentication(.*)?$' "$config_file"; then
    echo "Setting 'ChallengeResponseAuthentication no'..."
    sed -Ei 's/^#?ChallengeResponseAuthentication(.*)?$/ChallengeResponseAuthentication no/gm' "$config_file" \
        || echo "${red}Failed to set 'ChallengeResponseAuthentication no'${nc}"
fi

if grep -Eq '^KbdInteractiveAuthentication no$' "$config_file"; then
    echo "KbdInteractiveAuthentication already set to 'no'"
elif grep -Eq '^#?KbdInteractiveAuthentication(.*)?$' "$config_file"; then
    echo "Setting 'KbdInteractiveAuthentication no'..."
    sed -Ei 's/^#?KbdInteractiveAuthentication(.*)?$/KbdInteractiveAuthentication no/gm' "$config_file" \
        || echo "${red}Failed to set 'KbdInteractiveAuthentication no'${nc}"
fi

if grep -Eq '^UsePAM yes$' "$config_file"; then
    echo "UsePAM already set to 'yes'"
elif grep -Eq '^#?UsePAM(.*)?$' "$config_file"; then
    echo "Setting 'UsePAM yes'..."
    sed -Ei 's/^#?UsePAM(.*)?$/UsePAM yes/gm' "$config_file" \
        || echo "${red}Failed to set 'UsePAM yes'${nc}"
fi

if grep -Eq '^AllowAgentForwarding no$' "$config_file"; then
    echo "AllowAgentForwarding already set to 'no'"
elif grep -Eq '^#?AllowAgentForwarding(.*)?$' "$config_file"; then
    echo "Setting 'AllowAgentForwarding no'..."
    sed -Ei 's/^#?AllowAgentForwarding(.*)?$/AllowAgentForwarding no/gm' "$config_file" \
        || echo "${red}Failed to set 'AllowAgentForwarding no'${nc}"
fi

if grep -Eq '^AllowTcpForwarding no$' "$config_file"; then
    echo "AllowTcpForwarding already set to 'no'"
elif grep -Eq '^#?AllowTcpForwarding(.*)?$' "$config_file"; then
    echo "Setting 'AllowTcpForwarding no'..."
    sed -Ei 's/^#?AllowTcpForwarding(.*)?$/AllowTcpForwarding no/gm' "$config_file" \
        || echo "${red}Failed to set 'AllowTcpForwarding no'${nc}"
fi

if grep -Eq '^X11Forwarding no$' "$config_file"; then
    echo "X11Forwarding already set to 'no'"
elif grep -Eq '^#?X11Forwarding(.*)?$' "$config_file"; then
    echo "Setting 'X11Forwarding no'..."
    sed -Ei 's/^#?X11Forwarding(.*)?$/X11Forwarding no/gm' "$config_file" \
        || echo "${red}Failed to set 'X11Forwarding no'${nc}"
fi

if grep -Eq '^PrintMotd no$' "$config_file"; then
    echo "PrintMotd already set to 'no'"
elif grep -Eq '^#?PrintMotd(.*)?$' "$config_file"; then
    echo "Setting 'PrintMotd no'..."
    sed -Ei 's/^#?PrintMotd(.*)?$/PrintMotd no/gm' "$config_file" \
        || echo "${red}Failed to set 'PrintMotd no'${nc}"
fi

if grep -Eq '^TCPKeepAlive no$' "$config_file"; then
    echo "TCPKeepAlive already set to 'no'"
elif grep -Eq '^#?TCPKeepAlive(.*)?$' "$config_file"; then
    echo "Setting 'TCPKeepAlive no'..."
    sed -Ei 's/^#?TCPKeepAlive(.*)?$/TCPKeepAlive no/gm' "$config_file" \
        || echo "${red}Failed to set 'TCPKeepAlive no'${nc}"
fi

if grep -Eq '^Compression no$' "$config_file"; then
    echo "Compression already set to 'no'"
elif grep -Eq '^#?Compression(.*)?$' "$config_file"; then
    echo "Setting 'Compression no'..."
    sed -Ei 's/^#?Compression(.*)?$/Compression no/gm' "$config_file" \
        || echo "${red}Failed to set 'Compression no'${nc}"
fi

if grep -Eq '^ClientAliveInterval 300$' "$config_file"; then
    echo "ClientAliveInterval already set to '300'"
elif grep -Eq '^#?ClientAliveInterval(.*)?$' "$config_file"; then
    echo "Setting 'ClientAliveInterval 300'..."
    sed -Ei 's/^#?ClientAliveInterval(.*)?$/ClientAliveInterval 300/gm' "$config_file" \
        || echo "${red}Failed to set 'ClientAliveInterval 300'${nc}"
fi

if grep -Eq '^ClientAliveCountMax 2$' "$config_file"; then
    echo "UseClientAliveCountMaxPAM already set to '2'"
elif grep -Eq '^#?ClientAliveCountMax(.*)?$' "$config_file"; then
    echo "Setting 'ClientAliveCountMax 2'..."
    sed -Ei 's/^#?ClientAliveCountMax(.*)?$/ClientAliveCountMax 2/gm' "$config_file" \
        || echo "${red}Failed to set 'ClientAliveCountMax 2'${nc}"
fi

echo -e "\nRestarting sshd..."
systemctl restart sshd

echo -e "\n${green}Finished hardening sshd"
echo -e "${cyan}It is highly recommended to manually:
1) Change the default sshd port (22)
2) Disable PasswordAuthentication in favor of PubkeyAuthentication
3) Add 'AllowUsers [your username]' to the bottom of 'sshd_config'${nc}"


#### End of [ Main ]
########################################################################################
